# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service:
  name: ${self:custom.appconfig.stackName}
plugins:
  - serverless-offline
package:
  individually: false
  excludeDevDependencies: true
  include:
    - config/
    - dist/
    - node_modules/
custom:
  file: ${file(./config/serverlessconfig.json)}
  appconfig: ${file(./config/appconfig.json)}
  custom:
  serverless-offline:
    resourceRoutes: true
  webpack:
    includeModules: true
    packager: 'npm'
provider:
  stage: ${self:custom.file.stage, 'dev'}
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.file.awsRegion, 'eu-central-1'}
  stackTags: # Tags that will be added to each of the deployment resources
    jsonsls: ${self:custom.file.stackName}
  environment:
    s3Bucket: ${self:custom.file.s3Bucket}
    s3File: ${self:custom.file.s3File}
    basePath: ${self:custom.file.basePath}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  apiGateway: # Optional API Gateway global config
    binaryMediaTypes: # Optional binary media types the API might return
      - '*/*'
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::${self:custom.file.s3Bucket}/*'

# The `functions` block defines what code to deploy
functions:
  app:
    timeout: 15
    handler: ./dist/handler.handler
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
      - http:
          path: '{proxy+}'
          method: ANY
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
resources:
  Resources:
    s3BucketStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.file.s3Bucket}
